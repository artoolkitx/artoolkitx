apply plugin: 'com.android.application'

android {
    compileSdk 33
    defaultConfig {
        applicationId "org.artoolkitx.arx.ar2dtracking"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
}

/**
 * If you want to link the app to a central ARXJ.aar instead of integrating the ARXJ project into
 * your project you can do so with the specified repository below and by uncommenting the compile
 * of the .aar file in the dependencies.
 * You can see if the linking works by looking into the build directory of the app:
 * build/intermediates/exploded-aar in this directory you should see ARXJ-release.
 */
allprojects {
    repositories {
        jcenter()
        flatDir {
            dirs '../../../../../SDK/lib/ARXJ'
        }
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation(name:'arxj-release', ext:'aar') // This links the ARXJ-release library from the repository specified above ('../../../../../../SDK/lib/ARXJ').
    //implementation project(':ARXJ')                   // If you want to develop ARXJ and test it with AR2dTrackingExample you need to un-commend this line and
                                               // comment-out the line above.
}

// Task Actions is defined by task type of Copy. To reference a variable within a string, the string has to be delimited by " rather than '.
// The problem is when it comes to tasks, they're created once and stay static so there's no way to use a variable whose
// value may change after the task is created.
task CopyToDBFolderToAssetsDebug(type: Copy) {
    from "../../../../../Source/etc/android/cparam_cache"
    into "build/intermediates/assets/debug/cparam_cache"
}

task CopyToDBFolderToAssetsRelease(type: Copy) {
    from "../../../../../Source/etc/android/cparam_cache"
    into "build/intermediates/assets/release/cparam_cache"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'mergeDebugAssets') {
        println "** mergeDebugAssets ADDED **"
    }
    if (task.name == 'mergeReleaseAssets') {
        println "** mergeReleaseAssets ADDED **"
    }
}

// Task mergeDebugAssets and mergeReleaseAsset are a dynamically created Android build task that is not available until after the project's
// gradle configuration phase completes. afterEvaluate is Android gradle DSL hook that is called when the project's gradle configuration phase completes.
afterEvaluate { project ->
    println "** In afterEvaluate **"

    if (null != project.tasks.findByName("mergeDebugAssets")) {
        project.tasks.mergeDebugAssets.dependsOn("CopyToDBFolderToAssetsDebug")
    }

    if (null != project.tasks.findByName("mergeReleaseAssets")) {
        project.tasks.mergeReleaseAssets.dependsOn("CopyToDBFolderToAssetsRelease")
    }
}